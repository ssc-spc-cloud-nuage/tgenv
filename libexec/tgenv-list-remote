#!/usr/bin/env bash

set -uo pipefail;

####################################
# Ensure we can execute standalone #
####################################

function early_death() {
  echo "[FATAL] ${0}: ${1}" >&2;
  exit 1;
};

if [ -z "${TGENV_ROOT:-""}" ]; then
  # http://stackoverflow.com/questions/1055671/how-can-i-get-the-behavior-of-gnus-readlink-f-on-a-mac
  readlink_f() {
    local target_file="${1}";
    local file_name;

    while [ "${target_file}" != "" ]; do
      cd "$(dirname "${target_file}")" || early_death "Failed to 'cd \$(dirname ${target_file})' while trying to determine TGENV_ROOT";
      file_name="$(basename "${target_file}")" || early_death "Failed to 'basename \"${target_file}\"' while trying to determine TGENV_ROOT";
      target_file="$(readlink "${file_name}")";
    done;

    echo "$(pwd -P)/${file_name}";
  };

  TGENV_ROOT="$(cd "$(dirname "$(readlink_f "${0}")")/.." && pwd)";
  [ -n "${TGENV_ROOT}" ] || early_death "Failed to 'cd \"\$(dirname \"\$(readlink_f \"${0}\")\")/..\" && pwd' while trying to determine TGENV_ROOT";
else
  TGENV_ROOT="${TGENV_ROOT%/}";
fi;
export TGENV_ROOT;

if [ -n "${TGENV_HELPERS:-""}" ]; then
  log 'debug' 'TGENV_HELPERS is set, not sourcing helpers again';
else
  [ "${TGENV_DEBUG:-0}" -gt 0 ] && echo "[DEBUG] Sourcing helpers from ${TGENV_ROOT}/lib/helpers.sh";
  if source "${TGENV_ROOT}/lib/helpers.sh"; then
    log 'debug' 'Helpers sourced successfully';
  else
    early_death "Failed to source helpers from ${TGENV_ROOT}/lib/helpers.sh";
  fi;
fi;

# Ensure libexec and bin are in $PATH
for dir in libexec bin; do
  case ":${PATH}:" in
    *:${TGENV_ROOT}/${dir}:*) log 'debug' "\$PATH already contains '${TGENV_ROOT}/${dir}', not adding it again";;
    *)
      log 'debug' "\$PATH does not contain '${TGENV_ROOT}/${dir}', prepending and exporting it now";
      export PATH="${TGENV_ROOT}/${dir}:${PATH}";
      ;;
  esac;
done;

#####################
# Begin Script Body #
#####################
if [ ${#} -ne 0 ];then
  echo "usage: tgenv list-remote" 1>&2
  exit 1
fi

today=$(date +"%Y-%m-%d")
link_release="https://api.github.com/repos/gruntwork-io/terragrunt/tags?per_page=1000"

if [ ! -d ${TGENV_ROOT}/cache ]
then
    mkdir -p ${TGENV_ROOT}/cache
fi

if [ -f ${TGENV_ROOT}/cache/list_remote_${today} ]
then
  log 'debug' "Using today's cached list of terragrunt versions... delete ${TGENV_ROOT}/cache to force downloading full list from github."
  print=$(cat ${TGENV_ROOT}/cache/list_remote_${today})
else
  log 'debug' 'Cached list of terragrunt versions does not exists, Pulling from github API and saving to cache...'
  curl -sf $link_release -o ${TGENV_ROOT}/cache/list_remote_${today}
  
  return_code=$?
  if [ $return_code -eq 22 ];then
    log 'error' "Failed to get list of terragrunt version on $link_release. Using the most recent list from cache..."

    most_recent_cache_list_version=$(ls ${TGENV_ROOT}/cache | tr "" "\n" | tail -1)
    print=$(cat ${TGENV_ROOT}/cache/${most_recent_cache_list_version})
  else
    print=$(cat ${TGENV_ROOT}/cache/list_remote_${today})
  fi
fi

echo $print | grep -o -E "[0-9]+\.[0-9]+\.[0-9]+(-(rc|beta)[0-9]+)?" | uniq
